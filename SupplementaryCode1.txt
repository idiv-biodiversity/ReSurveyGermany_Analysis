# R code for the analyses in: 
# Jandt, U., Bruelheide, H., Jansen, J., Bonn, A., Grescho, V., Klenke, R., 
# Sabatini, F.M., Bernhardt-Römermann, M., Blüml, V., Dengler, J., 
# Diekmann, M., Dörfler, I., Döring, U., Dullinger, S., 
# Haider, S., Heinken, T., Horchler, P., Kuhn, G., Lindner, M., Metze, K., 
# Müller, N., Naaf, T., Peppler- Lisbach, C., Poschlod, P., Roscher, C., 
# Rosenthal, G., Rumpf, S., Schmidt, W., Schrautzer, W., Schwabe, A., 
# Schwartze, P., Sperle, T., Stanik, N., Storm, C., Voigt, W., Wegener, U., 
# Wesche, K., Wittig, B., Wulf, M. (2022): More losers than winners over one 
# century plant diversity change in Germany.
# Nature
#
# Author: Helge Bruelheide, 23.05.2022
# with contributions of Francesco Maria Sabatini 19.05.2022

library(reshape2)    # for casting matrices
library(data.table)  # for aggregating data
library(ggplot2)     # for graphics
library(DescTools)   # Gini coefficient and Lorenz curve
library(BSDA)        # sign test
library(Hmisc)       # error bars in Fig. 4
library(vegan)       # Shannon diversity  
library(matrixStats) # to calculate rowRanks
library(lmerTest)    # for mixed effects models (lmer)
library(parameters)  # for credible intervals for lmer

## Ancillary Function
# The records of species cover values were made by layer
# (tree layer, shrub layer, herb layer, moss layer)
# The percentage cover values of taxa occurring in different 
# layers of the same plot will be  merged, assuming a 
# random overlap of their, cover values and making sure 
# that the combined cover values cannot exceed 100. 
combine.cover <- function(x){
  # x= COV_PERC
  while (length(x)>1){
    x[2] <- x[1]+(100-x[1])*x[2]/100
    x <- x[-1]
  }
  return(x)
}

### Step. 1: Load data
setwd("c:\\Daten\\GVRD\\Data_GVRD6")  #choose your working directory
DT <- read.csv(file="ReSurveyGermany.csv")
DT <- data.table(DT)
str(DT) #610313 obs. of  6 variables:
# DT holds 
# PROJECT_ID:     ID of the project
# RELEVE_NR:      ID for plot records within the project
# PROJECT_ID_RELEVE_NR: ID across all projects, links DT to header
# LAYER:          code for the layer
# TaxonName:      Harmonized taxonomic name
# Cover_Perc:     Per cent cover of the species in the plot

# Load header data
header <- read.csv("Header_ReSurveyGermany.csv")
str(header) # 23641 obs. of  47 variables:

# Link DT to header
index1 <- match(DT$PROJECT_ID_RELEVE_NR, header$PROJECT_ID_RELEVE_NR)

header$RS_PROJECT_PLOT <- paste(header$PROJECT_ID, header$RS_PLOT, sep="_")
length(unique(header$RS_PROJECT_PLOT))
# In total, there are 7738 time series

# Combine cover of species across layers
DT2 <- DT[,list(Cover_Perc=combine.cover(Cover_Perc)), by=list(PROJECT_ID_RELEVE_NR,TaxonName)]
str(DT2)
# 583395 obs. of  3 variables

# Split RELEVE_NR_comb in DT into project-specific RELEVE_NR and project ID
DT2$PROJECT_ID   <- as.numeric(tstrsplit(DT2$PROJECT_ID_RELEVE_NR,"_")[[1]])
DT2$RELEVE_NR <- as.numeric(tstrsplit(DT2$PROJECT_ID_RELEVE_NR,"_")[[2]])

length(unique(DT2$PROJECT_ID))
# In total, there are 92 projects

##Create cross-link table between project names and sequential id
Projects <- header[!duplicated(header[,c("PROJECT_ID", "RS_PROJECT")]), c("PROJECT_ID", "RS_PROJECT")]

### Step. 2: Calculation of change 
# both by resurvey ID x species x time interval combinations 
# (species.change.list) and by
# resurvey ID x time interval combinations

# Tha analysis is done project-wise, which allows to analyse community-level changes 
# together with plot-specific changes (i.e. those taken on (semi-)permanent plots)
species.change.list <- data.frame(RS_PROJECT=NULL, RS_PLOT=NULL,
                                  from.n=NULL, to.n=NULL,from=NULL, to=NULL,species=NULL,
                                  absolute.change=NULL, relative.change=NULL, relative.rank.change=NULL,
                                  log.repsonse.change=NULL, absolute.change.colonizer=NULL,
                                  absolute.change.extinct=NULL)
# richness.change.list holds the different metrics for the
# resurvey ID x time interval combinations
richness.change.list <- data.frame(RS_PROJECT=NULL, RS_PLOT=NULL,
                                   from.n=NULL, to.n=NULL,from=NULL, to=NULL,log.richness.change=NULL,
                                   log.shannon.change=NULL, log.evenness.change=NULL, curve.diff=NULL,
                                   log.rank.change=NULL,log.rank.change.sum=NULL,
                                   mean.cover.change=NULL, median.cover.change=NULL,
                                   diff.gains.losses=NULL)

# loop for all 92 projects
for (i in c(1:length(unique(DT2$PROJECT_ID)))){
  print(i)
  # select the species cover data from a given project
  species.long <- DT2[DT2$PROJECT_ID==i,]
  # turn the long format into a RELEVE_NR by TaxonName matrix
  species <- reshape2::acast(species.long, RELEVE_NR~TaxonName, value.var ="Cover_Perc", fill=0)
  # select the header data from a given project
  env <- header[header$PROJECT_ID==i,]
  RELEVE_NR=env$RELEVE_NR
  year <- as.matrix(env$YEAR)
  dimnames(year)[[1]] <- env$RELEVE_NR
  dimnames(year)[[2]] <- "year"
  # RS_PLOT holds a unique (within the site) code of the resurveyed plot; 
  # it is used to pair observations from different times recorded in 
  # the same plot; gives a unique identifier for the resurveyed plot or 
  # set of plots in time if combined with RS_PROJECT (see RS_PROJECT_PLOT). 
  # Several plots in the same year might have the same RS_PLOT code if they have 
  # to be summarised for temporal comparisons.
  RS_PLOT <- env$RS_PLOT
  # plot.list holds the list of all RS_PLOT
  plot.list <- sort(names(table(RS_PLOT))[table(RS_PLOT)>1])
  # produce a presence/absence version of the RELEVE_NR by TaxonName matrix
  species_pa <- species
  species_pa[species_pa > 0] <- 1
  
  # link vegetation data to header data for this project
  index2 <- match(RELEVE_NR,env$RELEVE_NR)
  # loop for all RS_PLOT
  for (j in 1:length(plot.list)){
    target.year <- year[RS_PLOT %in% plot.list[j],]
    if (length(unique(target.year))>1){
      # Check whether the plot series actually has more than one data
      # this might happen when a previous plot was recorded several times
      # but no new record was made
      
      # produce a subset of the plot by species matrix
      species.target.plot <- species[RS_PLOT %in% plot.list[j],]
      # Remove empty cols, i.e. species that do not occur in the subset
      species.target.plot <- species.target.plot[,colSums(species.target.plot)!=0, drop=F]
      # produce a presence/absence version of the species.target.plot matrix
      species.target.plot.pa <- species.target.plot 
      species.target.plot.pa[species.target.plot.pa>0] <- 1
      # calculate plot species richness
      richness.target.plot <- rowSums(species.target.plot.pa)
      names(richness.target.plot) <- target.year
      # calculate plot Shannon diversity
      if (dim(species.target.plot)[[2]]>1){
        shannon.target.plot <- vegan::diversity(species.target.plot, index = "shannon")
      } else {
        shannon.target.plot <- c(0,0)
      }
      names(shannon.target.plot) <- target.year
      # calculate plot Pilou evenness
      evenness.target.plot <- shannon.target.plot/log(richness.target.plot )
      
      # take the mean of replicated plots
      species.target.plot <- aggregate(species.target.plot, by=list(target.year),FUN=mean)
      rownames(species.target.plot) <- species.target.plot$Group.1
      species.target.plot <- species.target.plot[,-1, drop=F] 
      # remove the first column from the aggregation function
      species.target.plot <- species.target.plot[order(as.numeric(rownames(species.target.plot)),decreasing=T),,drop=F]
      # reorder the plot records from the latest year being the first row
      
      # take the mean of richness
      richness.target.plot <- aggregate(richness.target.plot, by=list(target.year),FUN=mean)
      rownames(richness.target.plot) <- richness.target.plot$Group.1
      richness.target.plot <- richness.target.plot[,-1, drop=F]
      richness.target.plot <- richness.target.plot[order(as.numeric(rownames(richness.target.plot)),decreasing=T),,drop=F]
      
      # take the mean of shannon
      shannon.target.plot <- aggregate(shannon.target.plot, by=list(target.year),FUN=mean)
      rownames(shannon.target.plot) <- shannon.target.plot$Group.1
      shannon.target.plot <- shannon.target.plot[,-1, drop=F]
      shannon.target.plot <- shannon.target.plot[order(as.numeric(rownames(shannon.target.plot)),decreasing=T),,drop=F]
      # take the mean of eveness
      evenness.target.plot <- aggregate(evenness.target.plot, by=list(target.year),FUN=mean)
      rownames(evenness.target.plot) <- evenness.target.plot$Group.1
      evenness.target.plot <- evenness.target.plot[,-1, drop=F]
      evenness.target.plot <- evenness.target.plot[order(as.numeric(rownames(evenness.target.plot)),decreasing=T),,drop=F]
      
      # calculate differences in rank abundance curves
      # according to Avolio, M.L., Carroll, I.T., Collins, S.L., Houseman, G.R., 
      # Hallett, L.M., Isbell, F., Koerner, S.E., Komatsu, K.J., Smith, M.D., 
      # Wilcox, K.R., 2019. A comprehensive approach to analyzing community 
      # dynamics using rank abundance curves 10: e02881. 10.1002/ecs2.2881
      species.target.plot2 <- sweep(species.target.plot, 1, apply(species.target.plot,1,FUN=sum), FUN="/")
      species.target.plot2 <- species.target.plot2[order(as.numeric(rownames(species.target.plot2)),decreasing=T),,drop=F]
      # species.target.plot2 holds relative abundance values for each plot
      # the species are ranked per row using the matrixStats package
      species.target.plot.ranks2 <- as.matrix(rowRanks(as.matrix(-species.target.plot2, ties.method="average")))
      dimnames(species.target.plot.ranks2)[[1]] <- row.names(species.target.plot2)
      dimnames(species.target.plot.ranks2)[[2]] <- colnames(species.target.plot2)
      # turn ranks into relative ranks
      species.target.plot.ranks2 <- sweep(species.target.plot.ranks2, 1, apply(species.target.plot.ranks2,1,FUN=max), FUN="/")
      
      # calculate delta curve (curve.diff) according to Avolio et al. (2019)
      unique.relative.ranks <- c(0,unique(sort(species.target.plot.ranks2)))
      species.target.plot.ranks3 <- apply(species.target.plot.ranks2,2,FUN=cut,breaks=unique.relative.ranks, labels=F)
      dimnames(species.target.plot.ranks3)[[1]] <- rownames(species.target.plot2)
      curve.diff <- 0
      y1sum <- 0
      y2sum <- 0
      for (k in 2: length(unique.relative.ranks)){
        y1 <- species.target.plot2[1,species.target.plot.ranks3[1,]==k-1]
        y2 <- species.target.plot2[2,species.target.plot.ranks3[2,]==k-1]
        y1sum <- y1sum + ifelse(length(y1)>0,sum(y1),0)
        y2sum <- y2sum + ifelse(length(y2)>0,sum(y2),0)
        curve.diff <- curve.diff+y1sum-y2sum
      }
      curve.diff
      
      # calculate rank change (rank.change) according to Avolio et al. (2019)
      species.target.plot.ranks4 <- species.target.plot.ranks2[1,]-species.target.plot.ranks2[2,]
      rank.change <- sum(abs(species.target.plot.ranks4))/ncol(species.target.plot.ranks2)
      
      # calculate rank change separately for pos. and neg. change (rank.change.sign)
      rank.change.neg <- mean(species.target.plot.ranks4[species.target.plot.ranks4<0])
      rank.change.pos <- mean(species.target.plot.ranks4[species.target.plot.ranks4>0])
      
      rank.change.neg.sum <- sum(species.target.plot.ranks4[species.target.plot.ranks4<0])
      rank.change.pos.sum <- sum(species.target.plot.ranks4[species.target.plot.ranks4>0])
      
      # turn cover values in relative change values in this plot 
      # relative to max cover of the whole time series for that plot
      # currently not used in the paper, but was used in a previous version
      # and gave similar results
      species.target.plot3 <- sweep(species.target.plot, 2, apply(species.target.plot[,,drop=F],2,FUN=max), FUN="/")
      
      # calculate mean and median relative cover
      species.target.plot4 <- species.target.plot
      species.target.plot4[species.target.plot4==0] <- NA
      mean.cover <- apply(species.target.plot4,1, FUN=mean, na.rm=T)
      median.cover <- apply(species.target.plot4,1, FUN=median, na.rm=T)
      
      # Number of years in the time series
      n <- table(target.year)[order(as.numeric(names(table(target.year))),decreasing=T)]
      # Compare subsequent changes in a time series
      for (k in 1:(length(n)-1)){
        # diff.absolute.change is the difference in absolute cover values
        diff.absolute.change <- species.target.plot[k,,drop=F] - species.target.plot[k+1,,drop=F]
        diff.absolute.change[species.target.plot[k,]==0 & species.target.plot[k+1,]==0] <- NA
        # diff.relative.change is the difference in absolute cover values
        diff.relative.change <- species.target.plot3[k,,drop=F] - species.target.plot3[k+1,,drop=F]
        diff.relative.change[species.target.plot3[k,]==0 & species.target.plot3[k+1,]==0] <- NA
        # diff.relative.rank.change is the difference in relative ranks
        diff.relative.rank.change <- species.target.plot.ranks2[k,] - species.target.plot.ranks2[k+1,]
        diff.relative.rank.change[species.target.plot.ranks2[k,]==0 & species.target.plot.ranks2[k+1,]==0] <- NA
        # diff.absolute.change.colonizer is diff.absolute.change only for 
        # new colonizers in the interval
        diff.absolute.change.colonizer <- diff.absolute.change
        # only keep records that are new and did not occur in Year 1
        diff.absolute.change.colonizer[species.target.plot[k+1,]!=0] <- NA
        # diff.absolute.change.extinct is diff.absolute.change only for 
        # species that went extinct in the interval
        diff.absolute.change.extinct <- diff.absolute.change
        # only keep records that went extinct and did not occur in Year 2
        diff.absolute.change.extinct[species.target.plot[k,]!=0] <- NA
        # calculate number of species that increased or decreased in an interval
        diff.rel.cover <- species.target.plot[k,] - species.target.plot[k+1,]
        n.gains <- length(diff.rel.cover[diff.rel.cover>0])
        n.losses <- length(diff.rel.cover[diff.rel.cover<0])
        
        # collect all metrics for resurvey ID x species x time interval combinations
        
        ## FMS: Switching to LIST increases the speed of this loop substantially (since it avoids R overwriting a vector with 10^5 rows at every epoch)
        species.change.list <-  rbind(species.change.list, data.frame(
          RS_PROJECT=Projects$RS_PROJECT[i],
          RS_PLOT=plot.list[j],
          from.n=as.numeric(n[k+1]), to.n=as.numeric(n[k]), from=as.numeric(names(n)[k+1]),
          to=as.numeric(names(n)[k]),
          species=names(diff.relative.change),
          absolute.change=as.numeric(diff.absolute.change),
          relative.change=as.numeric(diff.relative.change),
          relative.rank.change=as.numeric(diff.relative.rank.change),
          absolute.change.colonizer=as.numeric(diff.absolute.change.colonizer),
          absolute.change.extinct=as.numeric(diff.absolute.change.extinct)))
        
        # collect all metrics for resurvey ID x time interval combinations
        # and calculate log response ratios for all metrics
        richness.change.list <- rbind(richness.change.list, data.frame(
          RS_PROJECT=Projects$RS_PROJECT[i],RS_PLOT=plot.list[j],
          from.n=as.numeric(n[k+1]), to.n=as.numeric(n[k]), from=as.numeric(names(n)[k+1]),
          to=as.numeric(names(n)[k]),
          log.richness.change=log(richness.target.plot[k,]/richness.target.plot[k+1,]),
          log.shannon.change=log(shannon.target.plot[k,]/shannon.target.plot[k+1,]),
          log.evenness.change=log(evenness.target.plot[k,]/evenness.target.plot[k+1,]),
          curve.diff=curve.diff,
          log.rank.change=log(rank.change.pos/-rank.change.neg),
          log.rank.change.sum=log(rank.change.pos.sum/-rank.change.neg.sum),
          mean.cover.change=log(mean.cover[k]/mean.cover[k+1]),
          median.cover.change=log(median.cover[k]/median.cover[k+1]),
          diff.gains.losses=n.gains-n.losses))
      }
    }
  }
}
# There are 24 warnings, which are caused by 
# log(rank.change.pos.sum/-rank.change.neg.sum) : NaNs produced

dim(richness.change.list) 
#  13987     15  in_MS Fig.2, Results, Methods

richness.change.list$RS_PROJECT_PLOT <- paste(richness.change.list$RS_PROJECT,richness.change.list$RS_PLOT, sep="_")
# Make a unique ID from RS_PROJECT and RS_PLOT 
length(unique(richness.change.list$RS_PROJECT_PLOT))
# 7738 in_MS Methods, Abstract

# remove empty rows from the resurvey ID x species x time interval combinations
str(species.change.list) #579449 obs. of  13 variables:
species.change.list2 <- species.change.list[!is.na(species.change.list$absolute.change),]
# add some variables for analysis
species.change.list2$mid.year <- ceiling((species.change.list2$to-species.change.list2$from)/2+species.change.list2$from)
species.change.list2$decade <- floor(species.change.list2$mid.year/10)*10
species.change.list2$end.decade <- floor(species.change.list2$to/10)*10
species.change.list2$slope <- species.change.list2$relative.change/(species.change.list2$to-species.change.list2$from)
species.change.list2$RS_PROJECT_PLOT <- paste(species.change.list2$RS_PROJECT,
                                              species.change.list2$RS_PLOT, sep="_")
str(species.change.list2) #458311 obs. of  17 variables, in_MS Results, Methods

### Step. 3: Calculation of change at the plot level
# Histogram on the number of intervals per time series
table(table(paste(richness.change.list$RS_PROJECT,richness.change.list$RS_PLOT)))
'   1    2    3    4    5    6    7    8    9   10   11   12   13   14   15   16   18 
6006  798  213  127  105  211   18   19   29    9   92    5    5    9    5   75    1 
  19   20   23   54 
   1    6    3    1 '
# The longest time seres has 54 intervals (Wegener_Stiege)

# The following code produces Fig. 1a, 
# x=log.richness.change has to be replaced with
# x=log.shannon.change for Extended Data Fig. 5a
# x=log.evenness.change for Fig. Extended Data Fig. 5b
# x=curve.diff for Fig. Extended Data Fig. 5c
# x=diff.gains.losses for Fig. Extended Data Fig. 5d
# x=mean.cover.change for Fig. Extended Data Fig. 5e
# x=median.cover.change for Fig. Extended Data Fig. 5f
model1 <- lmer(log.richness.change~1 + (1|RS_PROJECT_PLOT), data=richness.change.list)
summary(model1)
'Fixed effects:
              Estimate Std. Error         df t value Pr(>|t|)    
(Intercept) -6.233e-02  4.565e-03  5.310e+03  -13.65   <2e-16 ***'
ci(model1, ci=0.95, effects="all")
'    Parameter   CI      CI_low     CI_high
1 (Intercept) 0.95 -0.07127268 -0.05338002'

Fig1a <- ggplot(data=richness.change.list, aes(x=log.richness.change)) + 
  geom_histogram(bins = 50, 
                 col="black", fill="grey", 
                 size=.1)+
  theme_bw()+
  xlab(bquote("Plot richness changes [log" ["e"] *"(SR" ["Y2"] *"/SR" ["Y1"] *")]"))+
  ylab("Number of plot records") +
  theme(
    plot.background = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_blank(),
    axis.text.x = element_text(size=10), 
    axis.text.y = element_text(size=10),
    axis.title.x = element_text(size=10), 
    axis.title.y = element_text(size=10),
    plot.title = element_text(color = "black", size = 10),
    legend.position="none",
    axis.line = element_line(size = 1, color = "grey50")) +
  geom_vline(xintercept = coef(summary(model1))[1],  
             linetype="solid", color = "red", size=0.8) + # Add a vertical line at x = mean
  geom_vline(xintercept = 0,linetype="longdash", color = "black", size=0.8)  # Add a vertical line at x = mean
Fig1a

# Statistical test and confidence intervals for each metric
t1 <- t.test(richness.change.list$log.richness.change)
t1
't = -10.369, df = 13986, p-value < 2.2e-16
alternative hypothesis: true mean is not equal to 0
95 percent confidence interval:
 -0.04087346 -0.02787730
sample estimates:
  mean of x 
-0.03437538 '

### Step. 4: Calculation of change at the species level
# making use of the data.table function to aggregate changes in cover 
# (=absolute.change) by species
species.change.list2 <- data.table(species.change.list2)
change <- species.change.list2[,{n_pos <- length(absolute.change[absolute.change>0]);
n_neg <- length(absolute.change[absolute.change<0]);
n_all <- ifelse(n_pos+n_neg>0,n_pos+n_neg,1);
est <- binom.test(n_pos,n_all);
list(n=length(absolute.change),
     pos=length(absolute.change[absolute.change>0]),
     equal=length(absolute.change[absolute.change==0]), neg=length(absolute.change[absolute.change<0]),
     est.binom=est$estimate,
     conf.binom.minus=est$conf.int[1],
     conf.binom.plus=est$conf.int[2],
     p.values.binom=est$p.value,
     mean.absolute.change=mean(absolute.change, na.rm=T))}, by=species]
change # 1794 species

# Calculate the probability to increase in cover for the 
# 161 species with a significantly negative or positive change
# (according to a binomial test at p<0.05, with Holm correction) 
# and at least 100 change observations.
# Holm adjustment of p values
change$p.adjust <- p.adjust(change$p.values, method="holm")
change2b <- change[p.adjust<0.05 & n>=100,]
str(change2b) #161 obs. of  11 variables:
change2b <- change2b[order(change2b$est.binom),]
dim(change2b) # 161 11 Fig. 4 and Fig. 6


# Extended Data Fig. 4
ExtendedDataFig4 <- ggplot(data=change, aes(x=sqrt(abs(mean.absolute.change))*sign(mean.absolute.change))) + 
  geom_histogram(bins = 50, 
                 col="black", fill="grey", 
                 size=.1)+
  theme_bw()+
  xlab(bquote("Species mean cover changes (Cover" ["Y2"] *" - Cover" ["Y1"] *")"))+
  ylab("Number of species") +
  scale_x_continuous(breaks=c(-5,0, 5, 10), labels=c(-25,0,25,100)) +
  theme(plot.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.text.x = element_text(size=10), 
        axis.text.y = element_text(size=10),
        axis.title.x = element_text(size=10), 
        axis.title.y = element_text(size=10),
        plot.title = element_text(color = "black", size = 10),
        legend.position="none",
        axis.line = element_line(size = 1, color = "grey50")) +
  ## FMS: MISSING
  geom_vline(xintercept = median(sqrt(abs(change2b$mean.absolute.change))*
                                   sign(change2b$mean.absolute.change), na.rm=T),
             linetype="solid", color = "red", size=0.8) + # Add a vertical line at x = mean
  geom_vline(xintercept = 0,linetype="longdash", color = "black", size=0.8)  # Add a vertical line at x = mean
ExtendedDataFig4

# Statistical sign test
SIGN.test(change$mean.absolute.change)
's = 719, p-value = 2.338e-12
alternative hypothesis: true median is not equal to 0
95 percent confidence interval:
 -0.08922212 -0.03474445
sample estimates:
median of x 
-0.06251627 
'

# Do this calculation only with species with >= 100 interval observations
dim(change[n>=100,]) # 578 10
Fig1b <- ggplot(data=change[n>=100,], aes(x=mean.absolute.change)) + 
  geom_histogram(bins = 50, 
                 col="black", fill="grey", 
                 size=.1)+
  theme_bw()+
  #xlab(bquote("Species mean cover changes [percent points]" ["Y2-Y1"]))+
  xlab(bquote("Species mean cover changes (Cover" ["Y2"] *" - Cover" ["Y1"] *")"))+
  ylab("Number of species") +
  theme(plot.background = element_blank(),
        panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        axis.text.x = element_text(size=10), 
        axis.text.y = element_text(size=10),
        axis.title.x = element_text(size=10), 
        axis.title.y = element_text(size=10),
        plot.title = element_text(color = "black", size = 10),
        legend.position="none",
        axis.line = element_line(size = 1, color = "grey50")) +
  geom_vline(xintercept = mean(change2b$mean.absolute.change[change2b$n>=100], na.rm=T),
             linetype="solid", color = "red", size=0.8) + # Add a vertical line at x = mean
  geom_vline(xintercept = 0,linetype="longdash", color = "black", size=0.8)  # Add a vertical line at x = mean
Fig1b

# Statistical sign test
t1 <- t.test(change$mean.absolute.change[change$n>=100])
t1
'data:  change2abs$mean.absolute.change[change2abs$n >= 100]
t = -3.6248, df = 577, p-value = 0.0003147
alternative hypothesis: true mean is not equal to 0
95 percent confidence interval:
 -0.25408831 -0.07550228
sample estimates:
 mean of x 
-0.1647953 
'

# Produce Fig. 4 (without floristic status and EUNIS affiliation)
png(filename="Fig4.png", 
    width=4800, height=3600, units = "px", bg="white")
par(mar=c(27,15,1,1)) # Enlarge borders of plot
plot(seq(1:length(change2b$mean.absolute.change)),change2b$mean.absolute.change, 
     xaxt="n",yaxt="n",xlab=NA, ylab=NA, type="n", cex.lab=5.5, cex=4, ylim=c(0,1))
mtext("Probability to increase in cover", side=2, line=7, cex=5.5)
barplot(-(0.5-change2b$est.binom),width=1, space=0,
        offset=0.5, xaxt="n", add=T) 
errbar(seq(0.5,length(change2b$est.binom),by=1),change2b$est.binom,
       yplus=change2b$conf.binom.plus, 
       yminus=change2b$conf.binom.minus, add=T, cex=0.1, cap=0.003, lwd=2.5) 
x1neg <- change2b$species
x1neg[change2b$est.binom > 0.5] <- ""
x1pos <- change2b$species
x1pos[change2b$est.binom < 0.5] <- ""
axis(side=3,x1neg, at=seq(0,length(change2b$species)-1,by=1), las=2, cex.axis=2.3, 
     lwd=3, col.axis="black", font=3, pos=0.5, padj=1)
axis(side=1,x1pos, at=seq(0,length(change2b$species)-1,by=1), las=2, cex.axis=2.3, 
     lwd=3, col.axis="black", font=3, pos=0.5, padj=1)
axis(2,seq(from=0,to=1,by=0.05), at=seq(from=0,to=1,by=0.05), las=3, cex.axis=4, lwd=3)
par(mar=c(5,4,4,2)) # Rand zur?cksetzen
dev.off() # creates a file

### Step. 5: Calculation of the Gini coefficient 
# of increments and decrements across all species
# making use of the DescTools package to calculate the
# Lorenz curve for decrements

species.change.list2.neg <- species.change.list2[absolute.change<0,]
dim(species.change.list2.neg) [[1]] # 172259 in_MS Fig. 2
species.change.list2.pos <- species.change.list2[absolute.change>0,]
dim(species.change.list2.pos) [[1]] # 166557 in_MS Fig. 2

lorenz.curve.neg <- Lc(abs(species.change.list2.neg$absolute.change))
# and the Lorenz curve for increments, using the Lc command from DescTools
lorenz.curve.pos <- Lc(abs(species.change.list2.pos$absolute.change))
# these objects are used to draw the confidence intervals below

# function for the Lorenz curve
Lorenz_curve <- function(input){
  neg.input <- input[input<0]
  pos.input <- input[input>0]
  neg.input <- neg.input[order(neg.input, decreasing = T)]
  pos.input <- pos.input[order(pos.input, decreasing = F)]
  neg.curve <- array(0,c(length(neg.input),2), 
                     dimnames= list(seq(1,length(neg.input)), c("n","mean.change")))
  for (i in 1:length(neg.input)){
    if (i==1){
      neg.curve[i,1] <- 1
      neg.curve[i,2] <- abs(neg.input[i])
    } else {
      neg.curve[i,1] <- neg.curve[i-1,1] + 1
      neg.curve[i,2] <- neg.curve[i-1,2] + abs(neg.input[i])
    }
  }
  neg.curve[,1] <- neg.curve[,1]/neg.curve[length(neg.input),1] 
  neg.curve[,2] <- neg.curve[,2]/neg.curve[length(neg.input),2] 
  
  pos.curve <- array(0,c(length(pos.input),2), 
                     dimnames= list(seq(1,length(pos.input)), c("n","mean.change")))
  for (i in 1:length(pos.input)){
    if (i==1){
      pos.curve[i,1] <- 1
      pos.curve[i,2] <- abs(pos.input[i])
    } else {
      pos.curve[i,1] <- pos.curve[i-1,1] + 1
      pos.curve[i,2] <- pos.curve[i-1,2] + abs(pos.input[i])
    }
  }
  pos.curve[,1] <- pos.curve[,1]/pos.curve[length(pos.input),1] 
  pos.curve[,2] <- pos.curve[,2]/pos.curve[length(pos.input),2] 
  return(list(neg=neg.curve, pos=pos.curve))
}

# produce the object used to plot the Lorenz curve
res <- Lorenz_curve(species.change.list2$absolute.change)
str(res) # list of 2

# Produce Fig. 2a
# the confidence bands are calculated with the lines command
# from DescTools
# Note: this may take a few minutes for the calculation!
png(filename="Fig2a.png", width=800, height=600, units = "px", bg="white")
plot(res$neg[,2] ~ res$neg[,1], type="n", xlab="Proportion of observations", 
     ylab="Proportion of observed relative changes",
     cex=2, cex.axis=2, cex.lab=2)
lines(lorenz.curve.neg, conf.level=0.95,
      args.cband=list(col=SetAlpha("red", 0.3), border=SetAlpha("red", 0.3)))
lines(lorenz.curve.neg, col="red",, lwd=2)
lines(lorenz.curve.pos, conf.level=0.95,
      args.cband=list(col=SetAlpha("blue", 0.3), border=SetAlpha("blue", 0.3)))
lines(lorenz.curve.pos, col="blue",, lwd=2)
lines(c(0,1),c(0,1), lwd=2)
legend("topleft", bty="n", cex=2,
       lty=1, lwd=2, col=c("blue","red"), 
       legend=c("Positive change observations", "Negative change observations"))
mtext("a",side=2,line=4, at=1.05, las=1, cex=3)
dev.off()

# Calculate the Gini coefficient
DescTools::Gini(x = abs(species.change.list2.neg$absolute.change),conf.level=0.95, R=1000, 
                type="perc", unbiased=T) 
'     gini    lwr.ci    upr.ci 
0.7122407 0.7106913 0.7137028 '
DescTools::Gini(x = abs(species.change.list2.pos$absolute.change),conf.level=0.95, R=1000, 
                type="perc", unbiased=T) 
'     gini    lwr.ci    upr.ci 
0.7182918 0.7165554 0.7199334  '

### Step 6: Calculation of the Gini coefficient 
# of increments and decrements across all species

# divide species by their mean decrease, increase and absence of change
change <- change[order(change$mean.absolute.change, decreasing = T),]
change.neg <- change[mean.absolute.change<0,]
dim(change.neg) [[1]] #1011
change <- change[order(change$mean.absolute.change, decreasing = F),]
change.pos <- change[mean.absolute.change>0,]
dim(change.pos) [[1]] #719
dim(change[mean.absolute.change==0,]) [[1]] #64
1011+719+64 #1794

# Produce the Lorenz curves by  
# calculating the cumulative number of decreasing species 
# and and their cumulative mean changes
# separately for decreasing and increasing species
decr <- array(0,c(dim(change.neg)[[1]],2), dimnames= list(change.neg$species, c("n","mean.slope")))
for (i in 1:(dim(change.neg)[[1]])){
  if (i==1){
    decr[i,1] <- 1 
    decr[i,2] <- abs(change.neg$mean.absolute.change[i]) 
  } else {
    decr[i,1] <- decr[i-1,1] + 1 
    decr[i,2] <- decr[i-1,2] + abs(change.neg$mean.absolute.change[i]) 
  }
}
decr[dim(change.neg)[[1]],1] # 1011
decr[dim(change.neg)[[1]],2] # 1366.295
# number of decreasing species and the species' mean changes are scaled to 1, 
# using the last data line for cumulative species number and cumulated changes
decr[,1] <- decr[,1]/decr[dim(change.neg)[[1]],1]
decr[,2] <- decr[,2]/decr[dim(change.neg)[[1]],2]

# calculate cumulative number of increasing species 
# and and their cumulative mean changes
incr <- array(0,c(dim(change.pos)[[1]],2), dimnames= list(change.pos$species, c("n","mean.slope")))
for (i in 1:(dim(change.pos)[[1]])){
  if (i==1){
    incr[i,1] <- 1 #change.pos$n[i]
    incr[i,2] <- abs(change.pos$mean.absolute.change[i]) #*change.pos$n[i]
  } else {
    incr[i,1] <- incr[i-1,1] + 1 #change.pos$n[i]
    incr[i,2] <- incr[i-1,2] + abs(change.pos$mean.absolute.change[i]) #*change.pos$n[i]
  }
}
incr[dim(change.pos)[[1]],1] # 719
incr[dim(change.pos)[[1]],2] #  1195.36
# number of increasing species and the species' mean changes are scaled to 1, 
# using the last data line for cumulative species number and cumulated changes
incr[,1] <- incr[,1]/incr[dim(change.pos)[[1]],1]
incr[,2] <- incr[,2]/incr[dim(change.pos)[[1]],2]

# Lorenz curve for decrements, using the Lc command from the DescTools package
lorenz.curve.change.neg <- Lc(abs(change.neg$mean.absolute.change))
# and the Lorenz curve for increments
lorenz.curve.change.pos <- Lc(abs(change.pos$mean.absolute.change))
# these objects are used to draw the confidence intervals below

# Plot the Lorenz curve
# Fig. 2b
png(filename="Fig2b.png", width=800, height=600, units = "px", bg="white")
decr0 <- decr
rownames(decr0) <- NULL
plot(decr0[,2] ~ decr0[,1], type="n", xlab="Proportion of species", 
     ylab="Proportion of observed absolute changes",
     cex=2, cex.axis=2, cex.lab=2)
lines(lorenz.curve.change.neg, conf.level=0.95,
      args.cband=list(col=SetAlpha("red", 0.3), border=SetAlpha("red", 0.3)))
lines(lorenz.curve.change.neg, col="red", lwd=2)
lines(lorenz.curve.change.pos, conf.level=0.95,
      args.cband=list(col=SetAlpha("blue", 0.3), border=SetAlpha("blue", 0.3)))
lines(lorenz.curve.change.pos, col="blue", lwd=2)
lines(c(0,1),c(0,1), lwd=2)
legend("topleft", bty="n", cex=2,
       lty=1, lwd=2, col=c("red","blue"), 
       legend=c("Losers", "Winners"))
mtext("b",side=2,line=4, at=1.05, las=1, cex=3)
dev.off()


# Calculate the Gini coefficients
DescTools::Gini(x = abs(change.neg$mean.absolute.change),conf.level=0.95, R=1000, 
                type="perc", unbiased=T) 
'     gini    lwr.ci    upr.ci 
0.6915324 0.6597624 0.7179777  '

DescTools::Gini(x = abs(change.pos$mean.absolute.change),conf.level=0.95, R=1000, 
                type="perc", unbiased=T) 
'     gini    lwr.ci    upr.ci 
0.7775708 0.7197622 0.8164880  '
